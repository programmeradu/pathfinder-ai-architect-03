# Kubernetes Production Deployment for Pathfinder AI
# Scalable, resilient production deployment configuration

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pathfinder-frontend
  namespace: pathfinder-prod
  labels:
    app: pathfinder-frontend
    version: v1
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: pathfinder-frontend
  template:
    metadata:
      labels:
        app: pathfinder-frontend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: pathfinder-frontend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: pathfinder-frontend
        image: ghcr.io/pathfinder/pathfinder-ai:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: VITE_API_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: pathfinder-config
              key: api-base-url
        - name: VITE_WS_URL
          valueFrom:
            configMapKeyRef:
              name: pathfinder-config
              key: websocket-url
        - name: VITE_SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: pathfinder-secrets
              key: sentry-dsn
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - pathfinder-frontend
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: pathfinder-frontend-service
  namespace: pathfinder-prod
  labels:
    app: pathfinder-frontend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: pathfinder-frontend

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pathfinder-frontend-ingress
  namespace: pathfinder-prod
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://pathfinder.ai"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
spec:
  tls:
  - hosts:
    - pathfinder.ai
    - www.pathfinder.ai
    secretName: pathfinder-tls
  rules:
  - host: pathfinder.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pathfinder-frontend-service
            port:
              number: 80
  - host: www.pathfinder.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pathfinder-frontend-service
            port:
              number: 80

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pathfinder-config
  namespace: pathfinder-prod
data:
  api-base-url: "https://api.pathfinder.ai"
  websocket-url: "wss://api.pathfinder.ai/ws"
  environment: "production"
  log-level: "info"
  cache-ttl: "3600"
  rate-limit: "1000"

---
apiVersion: v1
kind: Secret
metadata:
  name: pathfinder-secrets
  namespace: pathfinder-prod
type: Opaque
data:
  sentry-dsn: # Base64 encoded Sentry DSN
  analytics-key: # Base64 encoded analytics key
  encryption-key: # Base64 encoded encryption key

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pathfinder-frontend
  namespace: pathfinder-prod
  labels:
    app: pathfinder-frontend

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pathfinder-frontend-pdb
  namespace: pathfinder-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: pathfinder-frontend

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pathfinder-frontend-hpa
  namespace: pathfinder-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pathfinder-frontend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pathfinder-frontend-netpol
  namespace: pathfinder-prod
spec:
  podSelector:
    matchLabels:
      app: pathfinder-frontend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: pathfinder-prod
    ports:
    - protocol: TCP
      port: 8000
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
